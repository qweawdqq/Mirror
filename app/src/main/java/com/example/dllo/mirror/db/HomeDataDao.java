package com.example.dllo.mirror.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.dllo.mirror.db.HomeData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HOME_DATA".
*/
public class HomeDataDao extends AbstractDao<HomeData, Long> {

    public static final String TABLENAME = "HOME_DATA";

    /**
     * Properties of entity HomeData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Menu = new Property(1, Short.class, "menu", false, "MENU");
        public final static Property Name = new Property(2, Short.class, "name", false, "NAME");
        public final static Property Resource = new Property(3, Short.class, "resource", false, "RESOURCE");
        public final static Property Price = new Property(4, Short.class, "price", false, "PRICE");
        public final static Property Brand = new Property(5, Short.class, "brand", false, "BRAND");
    };


    public HomeDataDao(DaoConfig config) {
        super(config);
    }
    
    public HomeDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HOME_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MENU\" INTEGER," + // 1: menu
                "\"NAME\" INTEGER," + // 2: name
                "\"RESOURCE\" INTEGER," + // 3: resource
                "\"PRICE\" INTEGER," + // 4: price
                "\"BRAND\" INTEGER);"); // 5: brand
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HOME_DATA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, HomeData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Short menu = entity.getMenu();
        if (menu != null) {
            stmt.bindLong(2, menu);
        }
 
        Short name = entity.getName();
        if (name != null) {
            stmt.bindLong(3, name);
        }
 
        Short resource = entity.getResource();
        if (resource != null) {
            stmt.bindLong(4, resource);
        }
 
        Short price = entity.getPrice();
        if (price != null) {
            stmt.bindLong(5, price);
        }
 
        Short brand = entity.getBrand();
        if (brand != null) {
            stmt.bindLong(6, brand);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public HomeData readEntity(Cursor cursor, int offset) {
        HomeData entity = new HomeData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1), // menu
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3), // resource
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4), // price
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) // brand
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, HomeData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMenu(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2));
        entity.setResource(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3));
        entity.setPrice(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4));
        entity.setBrand(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(HomeData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(HomeData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
